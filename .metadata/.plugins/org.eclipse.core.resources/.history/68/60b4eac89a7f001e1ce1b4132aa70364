package com.sonata.service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sonata.dto.ShoppingCartRequest;
import com.sonata.dto.ShoppingCartResponce;
import com.sonata.model.Cart;
import com.sonata.model.Product;
import com.sonata.repo.CartRepo;

import reactor.core.publisher.Flux;



@Service 
public class CartService {

	@Autowired
	private WebClient.Builder webBuilder;
	
	@Autowired
	private CartRepo cartrepo;
	
	

	public ShoppingCartResponce processAddRequest(int userId, List<ShoppingCartRequest> shoppingCartRequest) {
		ObjectMapper mapper = new ObjectMapper();
		
		
	  
		
		// Call product-service
		   String productserviceurl = "http://localhost:8082/product/product-details/{pId}";

		    List<Product> productServiceList = shoppingCartRequest.stream()
		            .map(request -> webBuilder.build()
		                    .get()
		                    .uri(productserviceurl, request.getpId()) // Pass the product ID to the URI
		                    .retrieve()
		                    .bodyToMono(Product.class) // Use bodyToMono for a single object
		                    .block())
		            .collect(Collectors.toList());
		
	
		
		
		
		

	    // Calculate total cost
	    final double[] totalCost = {0.0};
	    productServiceList.forEach(psl -> {
	        shoppingCartRequest.forEach(scr -> {
	            if (psl.getpId() == scr.getpId()) {
	                psl.setQuantity(scr.getQuantity());
	                totalCost[0] = totalCost[0] + psl.getPrice() * scr.getQuantity();
	            }
	        });
	    });

	   
	    //create cart
	    
	    int randomCartId = (int) (Math.random() * Math.pow(10, 10));
	    Cart cart = null; // Initialize cart outside the try block

	    try {
	        cart = new Cart(); // Initialize the existing 'cart' variable
	        cart.setUserId(userId);
	        cart.setCartId(randomCartId);
	        cart.setTotalCost(totalCost[0]);

	       
	        // Assuming 'products' is a method, you may need to call it here with the jsonProductList parameter
	        // products(jsonProductList).build();
	        cart.setProducts(mapper.writeValueAsString(productServiceList));
	    }
	    catch(JsonProcessingException e) {
	        throw new RuntimeException("Error while processing JSON for ProductServiceList", e);
	    }
	    
	    
	    //save the cart
	    cartrepo.save(cart);
	    
	 
	    //create api responce
	    ShoppingCartResponce responce = new ShoppingCartResponce() ;
	    responce.setCartId(cart.getCartId());
	    responce.setUserId(cart.getUserId());
	    responce.setTotalItems(cart.getTotalItems());
	    responce.setTotalCost(cart.getTotalCost());
	    responce.setProducts(productServiceList);
	    
	    
	    return responce;
	    
	    
	}



	
	

	// Assuming you have a CartRepository
	
	//one method
	public List<ShoppingCartResponce> getShoppingCart(int userId) {
	    List<Cart> carts = cartrepo.findByUserId(userId);
	    List<ShoppingCartResponce> cartResponse = new ArrayList<>();
	    ObjectMapper mapper = new ObjectMapper();

	    for (Cart cart : carts) {
	        ShoppingCartResponce response = new ShoppingCartResponce();
	        response.setCartId(cart.getCartId());
	        response.setUserId(cart.getUserId());
	        response.setTotalItems(cart.getTotalItems());
	        response.setTotalCost(cart.getTotalCost());

	        try {
	            List<Product> productServiceList = mapper.readValue(cart.getProducts(), new TypeReference<List<Product>>() {});
	            response.setProducts(productServiceList);
	        } catch (JsonProcessingException e) {
	            throw new RuntimeException(e);
	        }

	        cartResponse.add(response);
	    }

	    return cartResponse;
	}
	
	
	 public ShoppingCartResponce getUserCart(int userId) {
	        List<Cart> userCarts = cartrepo.findByUserId(userId);

	        if (!userCarts.isEmpty()) {
	            // Assuming you want to take the first cart if there are multiple (you might want to handle this differently)
	            Cart userCart = userCarts.get(0);
	            ShoppingCartResponce response = new ShoppingCartResponce();

	            response.setUserId(userId);
	            response.setCartId(userCart.getCartId());
	            response.setTotalItems(userCart.getTotalItems());
	            response.setTotalCost(userCart.getTotalCost());
	            response.setProducts(userCart.getProducts());

	            return response;
	        } else {
	            return null; // No cart found for the user
	        }
	    }

	
	


	

}
