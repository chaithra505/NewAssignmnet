package com.sonata.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.catalina.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sonata.dto.ShoppingCartRequest;
import com.sonata.dto.ShoppingCartResponce;
import com.sonata.model.Cart;
import com.sonata.model.Product;
import com.sonata.repo.CartRepo;

@Service
public class CartService {

    @Autowired
    private WebClient.Builder webBuilder;

    @Autowired
    private CartRepo cartrepo;

    public ShoppingCartResponce processAddRequest(int userId, List<ShoppingCartRequest> shoppingCartRequest) {
        // Call user-service to get user information
        User user = getUserById(userId);

        if (user == null) {
            throw new UserNotFoundException("User not found with ID: " + userId);
        }

        // Call product-service
        String productServiceUrl = "http://localhost:8082/product/product-details/{pId}";

        List<Product> productServiceList = shoppingCartRequest.stream()
                .map(request -> webBuilder.build()
                        .get()
                        .uri(productServiceUrl, request.getpId())
                        .retrieve()
                        .bodyToMono(Product.class)
                        .block())
                .collect(Collectors.toList());

        // Calculate total cost
        final double[] totalCost = {0.0};
        productServiceList.forEach(psl -> {
            shoppingCartRequest.forEach(scr -> {
                if (psl.getpId() == scr.getpId()) {
                    psl.setQuantity(scr.getQuantity());
                    totalCost[0] = totalCost[0] + psl.getPrice() * scr.getQuantity();
                }
            });
        });

        // Create cart
        int randomCartId = (int) (Math.random() * Math.pow(10, 10));
        Cart cart = null;

        try {
            cart = new Cart();
            cart.setUserId(userId);
            cart.setCartId(randomCartId);
            cart.setTotalCost(totalCost[0]);
            cart.setProducts(new ObjectMapper().writeValueAsString(productServiceList));
        } catch (JsonProcessingException e) {
            throw new RuntimeException("Error while processing JSON for ProductServiceList", e);
        }

        
        
        
        // Save the cart
        cartrepo.save(cart);

        // Create API response
        ShoppingCartResponce response = new ShoppingCartResponce();
        response.setCartId(cart.getCartId());
        response.setUserId(cart.getUserId());
        response.setTotalItems(cart.getTotalItems());
        response.setTotalCost(cart.getTotalCost());
        response.setProducts(productServiceList);

        return response;
    }

 

    
    private User getUserById(int userId) {
        // Call user-service to get user information
        String userServiceUrl = "http://localhost:8081/user/{uId}";

        return webBuilder.build()
                .get()
                .uri(userServiceUrl, userId)
                .retrieve()
                .bodyToMono(User.class)
                .block();
    }

}